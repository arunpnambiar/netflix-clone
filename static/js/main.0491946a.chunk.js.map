{"version":3,"sources":["commons/axios.js","components/row/Row.js","commons/requests.js","components/banner/Banner.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","axios","create","Row","title","fetchURL","isLargeRow","useState","movies","setmovies","settings","dots","infinite","speed","slidesToShow","slidesToScroll","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","original_name","API_KEY","requests","URL","fetchNetflixOrginals","fetchTreding","fetchTopRated","fetchActionMovie","fetchComdeyMovie","fetchHorrorMovie","fetchRomanceMovie","fetchDocumentariesMovie","Banner","size","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","titile","name","orginal_name","overview","Home","requestURL","value","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0491946a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default baseURL;","import React, { useState, useEffect } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport axios from \"../../commons/axios\";\r\nimport \"./Row.css\";\r\nconst baseURL = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n  const [movies, setmovies] = useState([]);\r\n  var settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 10,\r\n    slidesToScroll: 10,\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURL);\r\n      setmovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h1>{title}</h1>\r\n      <div className=\"row_posters\">\r\n        <Slider {...settings}>\r\n          {movies.map((movie) => (\r\n            <img\r\n              className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n              key={movie.id}\r\n              src={`${baseURL}${\r\n                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.original_name}\r\n            />\r\n          ))}\r\n        </Slider>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"930abd193389590387b68506b4e754fa\";\r\n\r\nconst requests = [\r\n  {\r\n    id: 1,\r\n    title: \"NETFLIX ORIGINALS\",\r\n    URL: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchNetflixOrginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    isLargeRow: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Trending Now\",\r\n    URL: `/trending/all/week?api_key=${API_KEY}&language=en-us`,\r\n    fetchTreding: `/trending/all/week?api_key=${API_KEY}&language=en-us`,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Top Rated\",\r\n    URL: `/movie/top_rated?api_key=${API_KEY}&language=en-us`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-us`,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Action Movies\",\r\n    URL: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchActionMovie: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"Comedy Movies\",\r\n    URL: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchComdeyMovie: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"Horror Movies\",\r\n    URL: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchHorrorMovie: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  },\r\n  {\r\n    id: 7,\r\n    title: \"Romance Movies\",\r\n    URL: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchRomanceMovie: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  },\r\n  {\r\n    id: 8,\r\n    title: \"Documentaries\",\r\n    URL: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchDocumentariesMovie: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  },\r\n];\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"../../commons/axios\";\r\nimport request from \"../../commons/requests\";\r\nimport \"./Banner.css\";\r\nexport default function Banner() {\r\n  const [movies, setmovies] = useState([]);\r\n  const [requests] = useState(request);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const fetchData = await axios.get(requests[0].URL);\r\n      const size = Math.floor(\r\n        Math.random() * (fetchData.data.results.length - 1)\r\n      );\r\n      setmovies(fetchData.data.results[size]);\r\n      return fetchData;\r\n    }\r\n    fetchData();\r\n  }, [requests]);\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original${movies?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"banner_tittle\">\r\n          {movies?.titile || movies?.name || movies?.orginal_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner_description\">{movies?.overview}</h1>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Row from \"../row/Row\";\r\nimport request from \"../../commons/requests\";\r\nimport \"./Home.css\";\r\nimport Banner from \"../banner/Banner\";\r\nfunction Home() {\r\n  const [requestURL] = useState(request);\r\n  return (\r\n    <div>\r\n      <Banner />\r\n      <div className=\"poster\">\r\n        {requestURL.map((value) => (\r\n          <Row\r\n            key={value.id}\r\n            title={value.title}\r\n            fetchURL={value.URL}\r\n            isLargeRow={value?.isLargeRow}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route}  from \"react-router-dom\";\nimport Home from './components/home/Home';\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n      <Route path=\"\">\n            <Home/>\n          </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}